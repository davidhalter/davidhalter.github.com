<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://jedidjah.ch/code/feed.atom</id>
  <updated>2013-09-08T00:00:00Z</updated>
  <link href="http://jedidjah.ch/code/" />
  <link href="http://jedidjah.ch/code/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Why Python's dir function is wrong</title>
    <id>http://jedidjah.ch/code/2013/9/8/wrong_dir_function</id>
    <updated>2013-09-08T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/9/8/wrong_dir_function" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;p&gt;In this post I want to describe why Pythons &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function is not working
correctly. It's something that I've stumbled upon by developing &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi&lt;/a&gt;. This
also describes how the &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;object&lt;/tt&gt; internals work.&lt;/p&gt;
&lt;p&gt;Have you ever noted how the &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function is not returning all the
attributes of an object? (Note: all examples are Python 3.2, but I've tested it
with the latest revisions as well)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# note: no __bases__&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__add__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__contains__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bases__&lt;/span&gt;  &lt;span class="c"&gt;# note: no AttributeError&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;object&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; obviously doesn't return all the methods it should. Why? &lt;tt class="docutils literal"&gt;str&lt;/tt&gt; is a
&lt;tt class="docutils literal"&gt;type&lt;/tt&gt; and an &lt;tt class="docutils literal"&gt;object&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well is everything a &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; then?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This also shows how &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; is a &lt;tt class="docutils literal"&gt;type&lt;/tt&gt;. If you want to understand that, you
may want to read some things about &lt;a class="reference external" href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"&gt;metaclasses&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="an-improved-dir-function"&gt;
&lt;h2&gt;An improved dir function&lt;/h2&gt;
&lt;p&gt;To simplify things, let us just create a different &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function, where
&lt;tt class="docutils literal"&gt;old_dir&lt;/tt&gt; would be how the &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function currently behaves:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;NotDefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;old_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NotDefined&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;NotDefined&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="why-does-this-happen"&gt;
&lt;h2&gt;Why does this happen?&lt;/h2&gt;
&lt;p&gt;For C code analysis I'm going to switch to the latest revisions (Python
3.4.0a1+). Somewhere in Python &amp;gt; 3.2 &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt; methods have been added to
all the normal objects (You could've customized your functions for a long time
now). The &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function looks up the magic functions for an object and
executes it.&lt;/p&gt;
&lt;p&gt;There are two different kind of &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt; functions, one for objects - one
for types, let's look at the C code documentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* __dir__ for generic objects: returns __dict__, __class__,&lt;/span&gt;
&lt;span class="cm"&gt;   and recursively up the __class__.__bases__ chain.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;object_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* the comments above say everything */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* __dir__ for type objects: returns __dict__ and __bases__.&lt;/span&gt;
&lt;span class="cm"&gt;   We deliberately don&amp;#39;t suck up its __class__, as methods belonging to the&lt;/span&gt;
&lt;span class="cm"&gt;   metaclass would probably be more confusing than helpful.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;type_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_New&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;merge_class_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_Keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Py_XDECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* full source code, not shortened*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see there's a note in front of the &lt;tt class="docutils literal"&gt;type_dir&lt;/tt&gt; method (in
&lt;tt class="docutils literal"&gt;Objects/typeobject.c&lt;/tt&gt;), that says: &lt;em&gt;&amp;quot;We deliberately don't suck up its
__class__, as methods belonging to the metaclass would probably be more
confusing than helpful.&amp;quot;&lt;/em&gt; &lt;strong&gt;This is the explanation.&lt;/strong&gt; I think that's not
correct, because people would like to know that there's a &lt;tt class="docutils literal"&gt;__bases__&lt;/tt&gt;
variable and a very useful &lt;tt class="docutils literal"&gt;__subclasses__&lt;/tt&gt; method in classes. &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; is the
tool Python programmers typically find out about it.&lt;/p&gt;
&lt;p&gt;Solution? Just change the &lt;tt class="docutils literal"&gt;type_dir&lt;/tt&gt; function, please! I will also suggest
this in the Python issue tracker. Edit: &lt;a class="reference external" href="http://bugs.python.org/msg197471"&gt;I just did&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Why did I research this? Because I want &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi&lt;/a&gt; to be correct. Really.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;Thank you for the discussion on &lt;a class="reference external" href="http://www.reddit.com/r/Python/comments/1m6zrq/pythons_dir_function_is_wrong/"&gt;reddit&lt;/a&gt;,
I want to clarify a few things:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi&lt;/a&gt; doesn't actually use the &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt; function. I
just realized that I haven't made this clear. Jedi generally doesn't execute
code. The reason why I'm mentioning this is because it has really confused me
(I'm using the interactive shell to introspect).&lt;/p&gt;
&lt;p&gt;Some argue that &lt;tt class="docutils literal"&gt;__bases__&lt;/tt&gt; is not relevant. That's true in a lot of cases.
But most of the other magic methods are also not relevant. I mean seriously,
who knows what &lt;tt class="docutils literal"&gt;str.__reduce_ex__&lt;/tt&gt; even does? Who would use it? &lt;tt class="docutils literal"&gt;__bases__&lt;/tt&gt;
is something that a lot of people have used in contrary.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Why Jedi not Rope</title>
    <id>http://jedidjah.ch/code/2013/1/19/why_jedi_not_rope</id>
    <updated>2013-01-19T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/1/19/why_jedi_not_rope" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;p&gt;Recently &lt;a class="reference external" href="http://www.reddit.com/r/Python/comments/15604u/pycharm_sale_75_off/c7qw8kv?context=3"&gt;I was asked&lt;/a&gt;
to compare Jedi with Rope, because saying &amp;quot;it's better&amp;quot; was just not good
enough. :-)&lt;/p&gt;
&lt;p&gt;Now, in the python world there are 3 fairly good auto-completion systems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://rope.sourceforge.net/"&gt;Rope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCharm (commercial IDE, not a library)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://jedi.jedidjah.ch/"&gt;Jedi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only other autocompletion library is &lt;cite&gt;PySmell&lt;/cite&gt;, which is just very simple.
Doesn't understand code that is a little bit more complicated. Other solutions
include &lt;cite&gt;PyDev&lt;/cite&gt;, &lt;cite&gt;PyDiction&lt;/cite&gt;, and &lt;cite&gt;pythoncomplete&lt;/cite&gt;, which are all fine but
don't offer a good autocompletion system.&lt;/p&gt;
&lt;p&gt;I will compare Rope and Jedi now. I'm not comparing with PyCharm now, it's not
as good as Jedi, but I'll talk about that another day.&lt;/p&gt;
&lt;p&gt;So the main difference between Rope and Jedi is their goal. You can see that in
the description:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rope, a python refactoring library.&lt;/li&gt;
&lt;li&gt;Jedi, an awesome autocompletion library for Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rope was never really intended to be an autocompletion library and therefore
has a natural disadvantage in this field.&lt;/p&gt;
&lt;div class="section" id="completion-comparison"&gt;
&lt;h2&gt;Completion comparison&lt;/h2&gt;
&lt;p&gt;So I went down to the real business: Checking for cases that might work in one
library, but not in the other. So I sat down and used Spyder to compare a few
things (Spyder is using Rope, but &lt;a class="reference external" href="https://github.com/davidhalter/jedi/issues/102"&gt;is considering&lt;/a&gt; to switch to Jedi).  As
expected I haven't found anything that is working in Rope, but not in Jedi.
With Rope the following things don't complete (work in Jedi though):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;generators/iterators&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;__call__&lt;/cite&gt; and other magic methods&lt;/li&gt;
&lt;li&gt;completion within classes/functions&lt;/li&gt;
&lt;li&gt;dynamic arrays&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;*args&lt;/cite&gt;, &lt;cite&gt;**kwargs&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;lambdas&lt;/li&gt;
&lt;li&gt;simple sys.path manipulations&lt;/li&gt;
&lt;li&gt;invalid code, Rope cannot handle too many errors, in Jedi it will always work
if some parts of the code are valid.&lt;/li&gt;
&lt;li&gt;performance in big files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rope isn't &amp;quot;bad&amp;quot;. It's just not as good as Jedi for autocompletion. But it's
pretty clear that Rope fails to understand some basic principles of Python. For
example &lt;cite&gt;list.append&lt;/cite&gt; in one place will already make Rope useless.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api-goodness"&gt;
&lt;h2&gt;API goodness&lt;/h2&gt;
&lt;p&gt;Jedi has a very nice and user-friendly API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jedi&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;import json; json.l&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;oad&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;load&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, what about Rope? The documentation says something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rope.base.project&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;
&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.ropeproject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rope.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;codeassist&lt;/span&gt;
&lt;span class="c"&gt;# Get the proposals; you might want to pass a Resource&lt;/span&gt;
&lt;span class="n"&gt;proposals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codeassist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_assist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;proposals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codeassist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sorted_proposals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proposals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I don't know it it's possible to do the same with Rope and Jedi, it's
certainly clear that there's &lt;a class="reference external" href="http://rope.sourceforge.net/library.html#rope-contrib-codeassist"&gt;no documentation&lt;/a&gt; around for
Rope. It's also not clear how Rope would check for relative imports, because
Rope simply doesn't know where the file it is completing is situated at (the
project folder might be in an other directory).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="refactoring"&gt;
&lt;h2&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;This is really the place where Rope shines. I don't want to talk about this too
long, but Jedi has only very limited refactoring possibilities like renaming.
There's a &lt;a class="reference external" href="https://github.com/davidhalter/jedi/issues/103"&gt;discussion&lt;/a&gt; going
on on github, how to improve the refactoring in Jedi. But Rope will probably
always be better there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Like Jedi is not really suited for refactoring, Rope is not really suited for
autocompletion. In a fully fledged IDE I would recommend to use Jedi for
autocompletion and Rope for refactorings. I think these two complement one
another very well.&lt;/p&gt;
&lt;p&gt;But if you are asking yourself: &lt;strong&gt;Which one should I choose&lt;/strong&gt; for my editor
(vim, emacs, sublime, etc)? The answer should always be &lt;strong&gt;Jedi&lt;/strong&gt;. You can
always add refactoring later on. But what you want in the beginning is a good
and rock-solid autocompletion library.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Switching to rstblog</title>
    <id>http://jedidjah.ch/code/2013/1/18/rstblog</id>
    <updated>2013-01-18T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/1/18/rstblog" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I would not recommend &lt;tt class="docutils literal"&gt;rstblog&lt;/tt&gt; anymore for anyone who is interested in
blogging with &lt;tt class="docutils literal"&gt;rst&lt;/tt&gt; files. Use &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;pelican&lt;/a&gt;
instead.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I never really had the motivation to have my own website. But because I'm going
to be in Afghanistan for a while, I wanted to do a little bit of blogging, so I
decided to start a &lt;a class="reference external" href="http://xkcd.com/148/"&gt;blag&lt;/a&gt; after all.&lt;/p&gt;
&lt;p&gt;The reason why I was not going for tumblr, blogspot, etc. was that once your
content is there, it's hard to get it away from there. I always like to have
open formats. Fortunately a &lt;a class="reference external" href="http://blog.dbrgn.ch"&gt;good friend&lt;/a&gt; is using
rstblog, which uses the rst format (google it, if you don't know it yet!) to
create blog content.&lt;/p&gt;
&lt;p&gt;The only really awful thing about rstblog is that there's no documentation
around. It's just an unmaintaned project. This is pretty annoying sometimes,
but if you're just going for a blog (no special wishes like me), you'll be
fine. I'm hosting it on github now (html only).&lt;/p&gt;
&lt;p&gt;So with his permission, I cloned his &lt;a class="reference external" href="https://github.com/dbrgn/blog"&gt;blog&lt;/a&gt;,
tweaked it a little (to have something more like a website). And here it is.
He also gives a little introduction into the &lt;a class="reference external" href="http://blog.dbrgn.ch/2012/6/11/rstblog/"&gt;powers of rstblog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Further ressources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mitsuhiko/rstblog"&gt;rstblog&lt;/a&gt; by &lt;a class="reference external" href="http://lucumr.pocoo.org/"&gt;Armin Ronacher&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;source code for my blog on &lt;a class="reference external" href="https://github.com/davidhalter/davidhalter.github.com/tree/dev"&gt;github&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Double Encoding / Full Text Problems with MySQL 5.1</title>
    <id>http://jedidjah.ch/code/2010/9/26/double_encoding</id>
    <updated>2010-09-26T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2010/9/26/double_encoding" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;div class="warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;This is an old blog post. I don't recommend to use mysql at all.  Switch to
&lt;a class="reference external" href="http://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt;, as I did, it's so much better.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As I updated MySQL from 5.0 to 5.1 (due to Debian I'm not always as uptodate as
others) I realized that I had huge problems with the fulltext indexes.&lt;/p&gt;
&lt;p&gt;The following FTS example seemed not to work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;fullTextTable&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;CHARACTER&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;utf8&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;utf8_unicode_ci&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="n"&gt;FULLTEXT&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;nameFull&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MyISAM&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="n"&gt;CHARSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;fullTextTable&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bärtsch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;börtsch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;böll&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;büll&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;fullTextTable&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;against&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+bärtsch&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;boolean&lt;/span&gt; &lt;span class="k"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;drop&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;fullTextTable&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-----------------------------&lt;/span&gt;
&lt;span class="k"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;----+----------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;----+----------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ä&lt;/span&gt;&lt;span class="n"&gt;rtsch&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ö&lt;/span&gt;&lt;span class="n"&gt;rtsch&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;ö&lt;/span&gt;&lt;span class="n"&gt;ll&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;----+----------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the help of the MySQL forums I realized that the cause was a double
encoding. The length of &lt;tt class="docutils literal"&gt;böll&lt;/tt&gt; for example was not 5, but 7.&lt;/p&gt;
&lt;p&gt;Solving it was not a huge thing, just one query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;update&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;fileNew&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;binary&lt;/span&gt; &lt;span class="k"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;latin1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the MySQL convert command doesn't work the expected way, you have to use
the binary command before the convert.&lt;/p&gt;
&lt;p&gt;To check if everything worked out the way i wanted it, I used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;binary&lt;/span&gt; &lt;span class="n"&gt;fileNew&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;latin1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The double encoding was just a little bug in my php interface: I did not use
&amp;quot;set names utf8&amp;quot;. Setting it after connecting has solved my problems.&lt;/p&gt;
&lt;p&gt;If you plan on using fulltext indexes, I would seriously recommend checking
your charsets.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Game Relase: Terrorist's Revenge</title>
    <id>http://jedidjah.ch/code/2007/12/7/game_out</id>
    <updated>2007-12-07T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2007/12/7/game_out" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is about a game I once wrote, which was part of my high school
thesis. Unfortunately, it's written in German.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Da morgen meine Präsentation ansteht, habe ich das Spiel nocheinmal wenig
überarbeitet und möchte es nun auch so herausgeben. Das Spiel ist ca. 25 MB
gross.&lt;/p&gt;
&lt;p&gt;Falls irgendwelche Anregungen oder Probleme bestehen, bitte über Mail melden
oder hier einen Kommentar hinterlassen.&lt;/p&gt;
&lt;p&gt;Wichtig ist ausserdem noch, dass das Spiel nur über Netzwerk wirklich gespielt
werden kann, also schliesst euch mit einem Kollegen zusammen.&lt;/p&gt;
&lt;p&gt;Der Download funktioniert wieder, diesmal auf einem Server wos immer gehen
sollte.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/static/high_school_thesis/terrorists_revenge_installer.exe"&gt;Download Terrorist's Revenge (Game-25mb)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/static/high_school_thesis/thesis.pdf"&gt;Download Maturaarbeit (Thesis-5mb)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/static/high_school_thesis/source.pdf"&gt;Download Code/Source File (PDF-2mb)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;hier kann nebenbei auch noch die Maturaarbeit und die Source (in einem File)
heruntergeladen werden. Wer die Source einzeln haben will, soll mir bitte eine
Mail schreiben.&lt;/p&gt;
&lt;p&gt;Das Projekt ist offiziell abgeschlossen. Ich werde kaum mehr etwas daran
verändern.&lt;/p&gt;
&lt;p&gt;Viel Spass beim Ausprobieren!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Maturaarbeit fertiggestellt</title>
    <id>http://jedidjah.ch/code/2007/11/14/high_school_thesis_finished</id>
    <updated>2007-11-14T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2007/11/14/high_school_thesis_finished" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is about a game I once wrote, which was part of my high school
thesis. Unfortunately, it's written in German.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Vor ein paar Wochen habe ich meine Maturaarbeit fertiggestellt. Nun werde ich das
Spiel selbst aber erst nach der Präsentation freigeben. Das liegt daran, dass
ich noch mindestens zwei Dinge tun muss: Partikelausrichtung und die
Erweiterung des Netzwerks für 3 und mehr Personen. Ich hoffe, dass das ganze
auch bald funktioniert, wenn nicht auch egal.&lt;/p&gt;
&lt;p&gt;Hier noch ein paar Bilder:&lt;/p&gt;
&lt;img alt="../screen0.jpg" class="align-center" src="../screen0.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;img alt="../screen1.jpg" class="align-center" src="../screen1.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;img alt="../screen2.jpg" class="align-center" src="../screen2.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;img alt="../screen3.jpg" class="align-center" src="../screen3.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;img alt="../screen4.jpg" class="align-center" src="../screen4.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;img alt="../screen5.jpg" class="align-center" src="../screen5.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;img alt="../screen6.jpg" class="align-center" src="../screen6.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;img alt="../screen7.jpg" class="align-center" src="../screen7.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;img alt="../screen8.jpg" class="align-center" src="../screen8.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;img alt="../screen9.jpg" class="align-center" src="../screen9.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;img alt="../screen10.jpg" class="align-center" src="../screen10.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;img alt="../screen11.jpg" class="align-center" src="../screen11.jpg" style="width: 800px; height: 613px;" /&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Buy-Window / Schüsse</title>
    <id>http://jedidjah.ch/code/2007/06/07/buy_window</id>
    <updated>2007-06-07T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2007/06/07/buy_window" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is about a game I once wrote, which was part of my high school
thesis. Unfortunately, it's written in German.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Hello again...
Ich habe leider nicht wirklich weitergearbeitet. Irgendwie hatte ich nicht so
wirklich lust. Könnte unter Umständen an den Shader liegen, die relativ
hochkompliziert sind und für mich nicht gerade leicht verdaulich. Gerade da ich
noch neues Zeug einlernen musse, von wegen Multitexturing oder Rendertotexture.&lt;/p&gt;
&lt;p&gt;Aber dennoch hab ich das ein oder andere fertig gebracht. Das Spiel umfasst nun
z.B. ein Buy-Window, wo man Waffen, Equipment usw. kaufen kann.&lt;/p&gt;
&lt;p&gt;Desweiteren sind Schüsse nun vollständig funktionstüchtig und funktionieren
auch wirklich perfekt (so wie sie sollen). Da müsste ich jetzt eigentlich nur
noch das Netwerk testen, um Multiplayer zu ermöglichen. Aber irgendwie macht
mich das überhaupt nicht an. Gerade da ich weiss wieviele Probleme in
Netzwerken entstehen können.&lt;/p&gt;
&lt;p&gt;Aber immerhin nimmt das Spiel langsam gestalt an und ich komme in eine Phase,
wo all das, was ich eigentlich haben will in meinem Spiel drin ist.&lt;/p&gt;
&lt;p&gt;Das was jetzt eigentlich noch fehlt ist der richtige Anstrich, dass heisst,
gute Modells, Levels usw. einfach ein schönes Spieldesign.&lt;/p&gt;
&lt;p&gt;Buy-Window:&lt;/p&gt;
&lt;img alt="../buy_window.jpg" class="align-center" src="../buy_window.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;p&gt;Wie man sieht, sieht das ganze noch wirklich schlecht aus. Das wird aber
sicherlich noch kommen, genau das ist das, was ich mit einem richtigen Anstrich
meinte. Die Ausarbeitung der kleinen Details im Spiel.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Shader, Netzwerk &amp; Kollisionen</title>
    <id>http://jedidjah.ch/code/2007/05/08/shader_network_collisions</id>
    <updated>2007-05-08T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2007/05/08/shader_network_collisions" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is about a game I once wrote, which was part of my high school
thesis. Unfortunately, it's written in German.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Da ich wie immer zu faul war, hier was zu posten, gibts nun mal wieder ein
grösseres Update. Ich erfülle so langsam alles, was es auch braucht für das
Spiel.&lt;/p&gt;
&lt;p&gt;Angefangen hat es mit den Kollisionen. Diese sind schon sehr weit
fortgeschritten (Dank geht u.a. an meinen Vater, der mir sehr geholfen hat) und
auch gut optimiert. Da will ich als nächstes die Gravity und das Treppenlaufen
ermitteln. Bilder dazu gibts leider keine, wäre ja nicht spannend ;)
Die Technik die ich verwende für die Kollisionen, ist relativ kompliziert.
Zuerst prüfe ich, ob die Spielfigur auch in einem gewissen Teil des Octrees
ist, dann wird geschaut ob die Fläche mit der Bounding Sphere der Figur (Eine
virtuelle Kugel, die die Figur approximiert) schneidet. Anschliessend wird dann
mit einer komplizierten, aber sehr sehr schnellen Methode überprüft ob das
Dreieck den Kreis schneidet, den es durch die Kollision mit der Fläche ergab.&lt;/p&gt;
&lt;p&gt;Daneben habe ich auch noch eine Prozedur geschrieben um eine Kollision eines
Schusses und einer Boundingsphere zu ermöglichen. Dazu habe ich dann auch eine
neue Charakter Unit geschrieben, wo alles mit Charakteren abläuft - Waffen,
Schüsse, Modelle usw.&lt;/p&gt;
&lt;p&gt;Das nächste was ich bearbeitet habe, ist das Netzwerk. Dieses ist mittlerweile
auch schon sehr gut fortgeschritten und in einem akzeptablen Zustand,
allerdings müsste ich das ganze dringend mal testen, da ich aber nicht wirklich
einen zweiten PC habe und unser zweiter PC sich nur sehr schlecht eignet dafür,
muss ich da mal auf eine geeignete Gelegenheit warten.
Beim Netwerk arbeite ich übrigens mit einem kombinierten Protokoll aus UDP/TCP,
UDP verwende ich für die grossen Datenmengen und TCP für Dinge die unbedingt
ankommen müssen.&lt;/p&gt;
&lt;p&gt;Mittlerweile habe ich es auch geschafft, mich in die Shader einzulesen (GLSL).
Das ganze ist sehr spannend, doch auch hochkompliziert. So habe ich
mittlerweile Shader implementiert und kann diese nun mit ATI Rendermonkey oder
einem anderen Editor schreiben.&lt;/p&gt;
&lt;p&gt;Das ist auch schon das einzige Bild was ich für dieses Mal habe:&lt;/p&gt;
&lt;img alt="../shader_bug.jpg" class="align-center" src="../shader_bug.jpg" /&gt;
&lt;p&gt;Das ist ein kleines Beispiel, was man mit Shadern so alles falsch machen kann.
Dies sollte eigentlich ein Comic Shader sein, aber irgendwie verhält er sich
ein bisschen anders ;)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Game Levels</title>
    <id>http://jedidjah.ch/code/2007/3/30/game_levels</id>
    <updated>2007-03-30T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2007/3/30/game_levels" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is about a game I once wrote, which was part of my high school
thesis. Unfortunately, it's written in German.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Ich habe jetzt das Levelladen und den Leveleditor eigentlich fertiggestellt.
Das ganze ist so aufgebaut, dass man von &lt;cite&gt;.3ds&lt;/cite&gt; Dateien laden kann, die dann
verarbeitet werden intern und in ein eigenes Format übergehen.&lt;/p&gt;
&lt;p&gt;Das schöne daran ist, dass ich einfach Levels in &lt;cite&gt;3ds Max&lt;/cite&gt; konstruieren kann,
die dann in meinem Spiel optimiert werden. Auf den Bildern werden überall die
Nodes der Octrees angezeigt, die max. 500 dreiecke enthalten.&lt;/p&gt;
&lt;p&gt;Wie man auf einigen Bildern sieht, sind teilweise Objekte relativ krass Polygon
- intensiv, wie z.B. dieser Busch hier.&lt;/p&gt;
&lt;p&gt;Ausserdem habe ich Frustum Culling eingebaut, sodass nur die Würfel, die vor
der Kamera liegen angezeigt werden.&lt;/p&gt;
&lt;p&gt;Weiterhin werde ich noch PVS (potentially visible sets) einbauen, die dann
helfen werden Würfel auszublenden, die hinter anderen Objekten verdeckt werden.&lt;/p&gt;
&lt;p&gt;Momentan arbeite ich fest an den Kollisionen und bin mich heftig in
Vektorgeometrie 3d am einarbeiten, da ich dies bei einem Lehrer gehabt hab, wo
ich nicht gerade viel gelernt hab. Ausserdem sind Kollisionsberechnungen wie
z.B. Sphere-Triangle und orientet Bounding Box - Triangle, die auf
Geschwindigkeit optimiert werden müssen nicht gerade die einfachsten.
Schwerer wirds dann noch wenn ich Treppen usw. realisieren will, wo man dann
auch noch über polygone hinwegsteigen können sollte. Da frag ich mich dann
wirklich, wie ich sowas mach. Wenn jemand eine gute Idee hat, bitte melden! ;-)&lt;/p&gt;
&lt;img alt="../level2.jpg" class="align-center" src="../level2.jpg" /&gt;
&lt;img alt="../level1.jpg" class="align-center" src="../level1.jpg" /&gt;
&lt;p&gt;Hier ist leider noch was dazwischengerutscht, sry ;)&lt;/p&gt;
&lt;img alt="../level3.jpg" class="align-center" src="../level3.jpg" /&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Gui goes final</title>
    <id>http://jedidjah.ch/code/2007/3/3/gui_goes_final</id>
    <updated>2007-03-03T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2007/3/3/gui_goes_final" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is about a game I once wrote, which was part of my high school
thesis. Unfortunately, it's written in German.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Ich habe jetzt meine GUI soweit beendet, mittlerweile habe ich noch sehr viele
Bugs gefixt. Ausserdem sind nun die Fenster immer schön geordnet im Vorder-
bzw. Hintergrund.&lt;/p&gt;
&lt;p&gt;Ich habe auch einen neuen Skin entworfen, was mich ziemlich viel Zeit kostete,
jedoch bin ich gut zufrieden damit, da er wirklich viel besser aussieht, wie
der Standart-Windows Skin.&lt;/p&gt;
&lt;p&gt;Nun habe ich die GUI auch ins Game eingebaut, die Fenster sind zwar vielfach
noch nicht wirklich mit allen Optionen ausgestattet, jedoch reicht mir das
ganze so wie es jetzt ist, für den Moment. Das ganze werde ich sicher noch
verbessern, bzw. verschönern.&lt;/p&gt;
&lt;p&gt;Hier noch die Screenshots, die sagen wohl am meisten aus:&lt;/p&gt;
&lt;img alt="../gui1.jpg" class="align-center" src="../gui1.jpg" /&gt;
&lt;img alt="../gui2.jpg" class="align-center" src="../gui2.jpg" /&gt;
&lt;img alt="../gui_editor.jpg" class="align-center" src="../gui_editor.jpg" style="width: 800px; height: 613px;" /&gt;
&lt;p&gt;PS: Im übrigen ist zu sagen, dass ich natürlich nicht nur an der GUI
drangesessen bin, während der langen Zeit zwischen den Posts. Ich kann jetzt
schon Levels laden und das ganze sieht auch noch ziemlich gut aus, dazu jedoch
nächste Woche.&lt;/p&gt;
</content>
  </entry>
</feed>

