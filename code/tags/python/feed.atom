<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://jedidjah.ch/code/feed.atom</id>
  <updated>2013-12-16T00:00:00Z</updated>
  <link href="http://jedidjah.ch/code/" />
  <link href="http://jedidjah.ch/code/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Platform as a Service: A Market Analysis</title>
    <id>http://jedidjah.ch/code/2013/12/16/paas</id>
    <updated>2013-12-16T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/12/16/paas" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;p&gt;Trying to create a really developer friendly deploy tool &lt;a class="reference external" href="https://github.com/davidhalter/depl"&gt;depl&lt;/a&gt;, I did some
market research. By creating it open source and not as a business, it does not
make sense to create it if something clearly better is out there. Platform as a
Service (&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Platform_as_a_service"&gt;PaaS&lt;/a&gt;) is a very easy way of getting your website deployed.
Sometimes. In a few blog posts I am thinking out loud about deploying. See also
the article on &lt;a class="reference external" href="/code/2013/12/16/django-deployment/"&gt;deploying Django&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="the-thing-that-current-paas-solves"&gt;
&lt;h2&gt;The thing that current PaaS solves&lt;/h2&gt;
&lt;p&gt;There are quite a few companies trying to compete for a developer friendly
hosting/deploy platform. Among those are &lt;a class="reference external" href="http://www.heroku.com"&gt;heroku&lt;/a&gt;, &lt;a class="reference external" href="https://www.openshift.com/"&gt;openshift&lt;/a&gt; and &lt;a class="reference external" href="http://cloudfoundry.com"&gt;cloudfoundry&lt;/a&gt;,
to name the biggest players.&lt;/p&gt;
&lt;p&gt;PaaS essentially solves the struggle to deploy apps (typically web apps) to the
internet. What you could have done with a few build scripts, &lt;a class="reference external" href="https://github.com/ansible/ansible"&gt;ansible&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/opscode/chef"&gt;chef&lt;/a&gt;
is now possible without any hassle, especially because it solves:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No downtime, also during deploy (depends on hoster).&lt;/li&gt;
&lt;li&gt;Automatic app detection, typically with heroku buildpacks, even &lt;a class="reference external" href="https://github.com/progrium/dokku"&gt;dokku&lt;/a&gt; uses
those. Which means no configuration at all.&lt;/li&gt;
&lt;li&gt;An integrated backup solution - backup is not an issue anymore.&lt;/li&gt;
&lt;li&gt;Multiple staging/deployment &amp;quot;clusters&amp;quot;, that one can target (see &lt;a class="reference external" href="http://cloudfoundry.com"&gt;cloudfoundry&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know, some of the PaaS solutions may not solve all of those points, but they
are basically things that are not so easy to solve with &amp;quot;just another deploy
tool&amp;quot;.&lt;/p&gt;
&lt;p&gt;It is important to note at this point, that PaaS are not an option for a lot of
in-house apps, because even if they are created open source - like &lt;a class="reference external" href="https://www.openshift.com/"&gt;openshift&lt;/a&gt;
and &lt;a class="reference external" href="http://cloudfoundry.com"&gt;cloudfoundry&lt;/a&gt; - it's not that easy to set them up, because your own cloud
still requires a lot of ressources and maintenance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-is-paas-not-enough"&gt;
&lt;h2&gt;Why is PaaS not enough?&lt;/h2&gt;
&lt;p&gt;The big problem with PaaS is basically that they don't really give you power
over the servers you are using. The most visible manifestation of that is that
almost nobody uses static files with &lt;a class="reference external" href="http://www.heroku.com"&gt;heroku&lt;/a&gt; (and there's probably the same
issue with &lt;a class="reference external" href="https://www.openshift.com/"&gt;openshift&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I really don't want app development - I want software development, where you as
a developer have control over the machine. This means configuring nginx and so
on. Being limited as a web developer reminds me too much of the old PHP shared
hosting times. What if you realize that you can gain a lot of speed by using a
certain cache, but your PaaS doesn't support that? Maybe it doesn't support
memcached?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-really-paas-could-also-allow-more-configuration"&gt;
&lt;h2&gt;But really - PaaS could also allow more configuration&lt;/h2&gt;
&lt;p&gt;I think one of the problems that PaaS has right now is that people thought too
much about billing customers. I know cashflow is important - but having happy
customers also allows for that. They invest a lot into new services, but not
into a multitude of configurations of services. I think a combination of a
&lt;a class="reference external" href="https://github.com/davidhalter/depl"&gt;depl&lt;/a&gt; style configurations and a good &lt;a class="reference external" href="http://www.docker.io"&gt;docker&lt;/a&gt; service with backup capability
and HA load balancers could be a really interesting new PaaS for example.&lt;/p&gt;
&lt;p&gt;Do you agree? I would really like to have your opinion on &lt;a class="reference external" href="https://github.com/davidhalter/depl"&gt;depl&lt;/a&gt; and its
approach. Especially the configuration API.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Switching to rstblog</title>
    <id>http://jedidjah.ch/code/2013/1/18/rstblog</id>
    <updated>2013-01-18T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/1/18/rstblog" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I would not recommend &lt;tt class="docutils literal"&gt;rstblog&lt;/tt&gt; anymore for anyone who is interested in
blogging with &lt;tt class="docutils literal"&gt;rst&lt;/tt&gt; files. Use &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;pelican&lt;/a&gt;
instead.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I never really had the motivation to have my own website. But because I'm going
to be in Afghanistan for a while, I wanted to do a little bit of blogging, so I
decided to start a &lt;a class="reference external" href="http://xkcd.com/148/"&gt;blag&lt;/a&gt; after all.&lt;/p&gt;
&lt;p&gt;The reason why I was not going for tumblr, blogspot, etc. was that once your
content is there, it's hard to get it away from there. I always like to have
open formats. Fortunately a &lt;a class="reference external" href="http://blog.dbrgn.ch"&gt;good friend&lt;/a&gt; is using
rstblog, which uses the rst format (google it, if you don't know it yet!) to
create blog content.&lt;/p&gt;
&lt;p&gt;The only really awful thing about rstblog is that there's no documentation
around. It's just an unmaintaned project. This is pretty annoying sometimes,
but if you're just going for a blog (no special wishes like me), you'll be
fine. I'm hosting it on github now (html only).&lt;/p&gt;
&lt;p&gt;So with his permission, I cloned his &lt;a class="reference external" href="https://github.com/dbrgn/blog"&gt;blog&lt;/a&gt;,
tweaked it a little (to have something more like a website). And here it is.
He also gives a little introduction into the &lt;a class="reference external" href="http://blog.dbrgn.ch/2012/6/11/rstblog/"&gt;powers of rstblog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Further ressources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mitsuhiko/rstblog"&gt;rstblog&lt;/a&gt; by &lt;a class="reference external" href="http://lucumr.pocoo.org/"&gt;Armin Ronacher&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;source code for my blog on &lt;a class="reference external" href="https://github.com/davidhalter/davidhalter.github.com/tree/dev"&gt;github&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">The current state of deploying Django applications</title>
    <id>http://jedidjah.ch/code/2013/12/16/django-deployment</id>
    <updated>2013-12-16T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/12/16/django-deployment" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;p&gt;I've recently tried to release a Django application in a small intranet. It was
hell all over again. I'm not very experienced with nginx, uwsgi and gunicorn,
so I always have to read a lot.&lt;/p&gt;
&lt;p&gt;The fact is: &lt;strong&gt;Deploying Django in 2013 is hard!&lt;/strong&gt; As a guy who writes 2-3
small web apps a year, I don't want to fight with nginx and gunicorn. I just
want to use something like &lt;tt class="docutils literal"&gt;deploy test.example.org&lt;/tt&gt; in my Django directory.&lt;/p&gt;
&lt;p&gt;So I decided to write my own (and yet) little deployment software. If people
like it, I'm willing to invest some of my time. I would be very happy to
receive feedback on how we could create an API that makes deploying simple
things really easy!&lt;/p&gt;
&lt;div class="section" id="php-goodness"&gt;
&lt;h2&gt;PHP Goodness?!&lt;/h2&gt;
&lt;p&gt;Let's face it, PHP is &lt;a class="reference external" href="http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/"&gt;horrible&lt;/a&gt;. But the PHP eco system has always done one
thing fairly well: Deploying is easy. You can argue that Nginx is better than
Apache, but still all the new sexy systems (Django/Rails/Node/Flask) are far
more complicated than &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt; install php5&lt;/tt&gt;, if you want to deploy to your
own server.&lt;/p&gt;
&lt;p&gt;Now - I don't want (old) PHP deployment back. There's often no easy way of
making a difference between debug and production. People screw up dependencies
and permissions. But let's face it. PHP has something really valuable there for
beginners and &amp;quot;app programmers&amp;quot; that don't like dealing with systems,
especially if they don't like Linux (e.g. &lt;tt class="docutils literal"&gt;WAMP&lt;/tt&gt; people).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-travis-ci"&gt;
&lt;h2&gt;Solution: Travis-ci?&lt;/h2&gt;
&lt;p&gt;Anybody using &lt;a class="reference external" href="https://travis-ci.org"&gt;Travis-ci&lt;/a&gt;? &lt;strong&gt;Awesome&lt;/strong&gt;, right?  It
just solves testing for you. That is how I imagine &lt;a class="reference external" href="https://github.com/davidhalter/depl"&gt;depl&lt;/a&gt; to be. Travis also
does something like a deployment. Your code is completely running on their
servers and can be tested. In comparison to e.g. Heroku (which is also pretty
cool), travis uses a more explicit way to deploy. I like travis way better,
because travis yaml files allow for a more flexibility and complete control. I
also like to know what's going on.&lt;/p&gt;
&lt;p&gt;My solution provides defaults for typical use cases. It leaves more complex use
cases to awesome software like &lt;a class="reference external" href="https://github.com/ansible/ansible"&gt;ansible&lt;/a&gt;. If you really need 10 different
databases, custom paths, etc, you shouldn't be using &lt;a class="reference external" href="https://github.com/davidhalter/depl"&gt;depl&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-deployment-options"&gt;
&lt;h2&gt;Some Deployment Options&lt;/h2&gt;
&lt;p&gt;There are a variety of tools to deploy, but non of them really fit the simple
use case. I don't want dozens of files just for deploying my very simple Django
project. I want at most one (something like travis). But to give you an
overview:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ansible/ansible"&gt;ansible&lt;/a&gt; is awesome for deploying big projects, you could check out &lt;a class="reference external" href="http://www.stavros.io/posts/example-provisioning-and-deployment-ansible/"&gt;this&lt;/a&gt;
for a Django deployment with ansible.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/opscode/chef"&gt;chef&lt;/a&gt;/&lt;a class="reference external" href="https://github.com/puppetlabs/puppet"&gt;puppet&lt;/a&gt; do the same thing. But I like &lt;a class="reference external" href="https://github.com/ansible/ansible"&gt;ansible&lt;/a&gt; with its &lt;tt class="docutils literal"&gt;.yml&lt;/tt&gt; files
better somehow. It's a cleaner approach IMHO.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.docker.io"&gt;docker&lt;/a&gt; is awesome, but you still have to deploy your software into docker
containers - that's where &lt;a class="reference external" href="https://github.com/davidhalter/depl"&gt;depl&lt;/a&gt; could step in.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mitchellh/vagrant"&gt;vagrant&lt;/a&gt; is cool(for development), but again - how do you deploy in the first
place. And also I wouldn't trust virtualbox for deploying things.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have analyzed those options and &lt;a class="reference external" href="/code/2013/12/16/paas/"&gt;Platform as a Service&lt;/a&gt; providers
briefly. I realized that there is nothing to deploy Django easily (in an
in-house setting), so I started creating &lt;a class="reference external" href="https://github.com/davidhalter/depl"&gt;depl&lt;/a&gt;. Not just for Django. For all
the frameworks out there that still struggle with deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="on-a-side-note-similar-ideas-to-depl"&gt;
&lt;h2&gt;On a Side Note: Similar ideas to depl&lt;/h2&gt;
&lt;p&gt;I've found two projects that are similar to what I imagine a good deploy tool
should be like. The first one is &lt;a class="reference external" href="https://github.com/capistrano/capistrano"&gt;capistrano&lt;/a&gt; for ruby/rails. My problem with
capistrano is that I don't really understand it - but I also don't really
understand the ruby world, so I won't complain here.  Something just smells
bad, because the tool can not be explained in one page.&lt;/p&gt;
&lt;p&gt;Quite with the same problems struggles the second tool &amp;quot;&lt;a class="reference external" href="http://gigaom.com/2012/10/11/wercker-aims-to-fix-the-app-dev-universe/"&gt;wercker&lt;/a&gt;&amp;quot;. It's a
little bit too hard to explain, because it also includes a
testing/deploying/whatever platform. It seems to be a very complete and
complicated model - too complicated for a normal open source developer. Might
be interesting for professionals deploying web applications very often.&lt;/p&gt;
&lt;p&gt;However both really haven't inspired me. The only positive inspiration is
travis and the fact that all things should be easy in life. :-)&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Why Jedi not Rope</title>
    <id>http://jedidjah.ch/code/2013/1/19/why_jedi_not_rope</id>
    <updated>2013-01-19T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/1/19/why_jedi_not_rope" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;p&gt;Recently &lt;a class="reference external" href="http://www.reddit.com/r/Python/comments/15604u/pycharm_sale_75_off/c7qw8kv?context=3"&gt;I was asked&lt;/a&gt;
to compare Jedi with Rope, because saying &amp;quot;it's better&amp;quot; was just not good
enough. :-)&lt;/p&gt;
&lt;p&gt;Now, in the python world there are 3 fairly good auto-completion systems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://rope.sourceforge.net/"&gt;Rope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCharm (commercial IDE, not a library)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://jedi.jedidjah.ch/"&gt;Jedi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only other autocompletion library is &lt;cite&gt;PySmell&lt;/cite&gt;, which is just very simple.
Doesn't understand code that is a little bit more complicated. Other solutions
include &lt;cite&gt;PyDev&lt;/cite&gt;, &lt;cite&gt;PyDiction&lt;/cite&gt;, and &lt;cite&gt;pythoncomplete&lt;/cite&gt;, which are all fine but
don't offer a good autocompletion system.&lt;/p&gt;
&lt;p&gt;I will compare Rope and Jedi now. I'm not comparing with PyCharm now, it's not
as good as Jedi, but I'll talk about that another day.&lt;/p&gt;
&lt;p&gt;So the main difference between Rope and Jedi is their goal. You can see that in
the description:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rope, a python refactoring library.&lt;/li&gt;
&lt;li&gt;Jedi, an awesome autocompletion library for Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rope was never really intended to be an autocompletion library and therefore
has a natural disadvantage in this field.&lt;/p&gt;
&lt;div class="section" id="completion-comparison"&gt;
&lt;h2&gt;Completion comparison&lt;/h2&gt;
&lt;p&gt;So I went down to the real business: Checking for cases that might work in one
library, but not in the other. So I sat down and used Spyder to compare a few
things (Spyder is using Rope, but &lt;a class="reference external" href="https://github.com/davidhalter/jedi/issues/102"&gt;is considering&lt;/a&gt; to switch to Jedi).  As
expected I haven't found anything that is working in Rope, but not in Jedi.
With Rope the following things don't complete (work in Jedi though):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;generators/iterators&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;__call__&lt;/cite&gt; and other magic methods&lt;/li&gt;
&lt;li&gt;completion within classes/functions&lt;/li&gt;
&lt;li&gt;dynamic arrays&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;*args&lt;/cite&gt;, &lt;cite&gt;**kwargs&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;lambdas&lt;/li&gt;
&lt;li&gt;simple sys.path manipulations&lt;/li&gt;
&lt;li&gt;invalid code, Rope cannot handle too many errors, in Jedi it will always work
if some parts of the code are valid.&lt;/li&gt;
&lt;li&gt;performance in big files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rope isn't &amp;quot;bad&amp;quot;. It's just not as good as Jedi for autocompletion. But it's
pretty clear that Rope fails to understand some basic principles of Python. For
example &lt;cite&gt;list.append&lt;/cite&gt; in one place will already make Rope useless.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api-goodness"&gt;
&lt;h2&gt;API goodness&lt;/h2&gt;
&lt;p&gt;Jedi has a very nice and user-friendly API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jedi&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;import json; json.l&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;oad&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;load&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, what about Rope? The documentation says something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rope.base.project&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;
&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.ropeproject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rope.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;codeassist&lt;/span&gt;
&lt;span class="c"&gt;# Get the proposals; you might want to pass a Resource&lt;/span&gt;
&lt;span class="n"&gt;proposals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codeassist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_assist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;proposals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codeassist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sorted_proposals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proposals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I don't know it it's possible to do the same with Rope and Jedi, it's
certainly clear that there's &lt;a class="reference external" href="http://rope.sourceforge.net/library.html#rope-contrib-codeassist"&gt;no documentation&lt;/a&gt; around for
Rope. It's also not clear how Rope would check for relative imports, because
Rope simply doesn't know where the file it is completing is situated at (the
project folder might be in an other directory).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="refactoring"&gt;
&lt;h2&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;This is really the place where Rope shines. I don't want to talk about this too
long, but Jedi has only very limited refactoring possibilities like renaming.
There's a &lt;a class="reference external" href="https://github.com/davidhalter/jedi/issues/103"&gt;discussion&lt;/a&gt; going
on on github, how to improve the refactoring in Jedi. But Rope will probably
always be better there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Like Jedi is not really suited for refactoring, Rope is not really suited for
autocompletion. In a fully fledged IDE I would recommend to use Jedi for
autocompletion and Rope for refactorings. I think these two complement one
another very well.&lt;/p&gt;
&lt;p&gt;But if you are asking yourself: &lt;strong&gt;Which one should I choose&lt;/strong&gt; for my editor
(vim, emacs, sublime, etc)? The answer should always be &lt;strong&gt;Jedi&lt;/strong&gt;. You can
always add refactoring later on. But what you want in the beginning is a good
and rock-solid autocompletion library.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Why Pythons dir function is wrong</title>
    <id>http://jedidjah.ch/code/2013/9/8/wrong_dir_function</id>
    <updated>2013-09-08T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/9/8/wrong_dir_function" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;p&gt;In this post I want to describe why Pythons &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function is not working
correctly. It's something that I've stumbled upon by developing &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi&lt;/a&gt;. This
also describes how the &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;object&lt;/tt&gt; internals work.&lt;/p&gt;
&lt;p&gt;Have you ever noted how the &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function is not returning all the
attributes of an object? (Note: all examples are Python 3.2, but I've tested it
with the latest revisions as well)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# note: no __bases__&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__add__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__contains__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bases__&lt;/span&gt;  &lt;span class="c"&gt;# note: no AttributeError&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;object&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; obviously doesn't return all the methods it should. Why? &lt;tt class="docutils literal"&gt;str&lt;/tt&gt; is a
&lt;tt class="docutils literal"&gt;type&lt;/tt&gt; and an &lt;tt class="docutils literal"&gt;object&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well is everything a &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; then?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This also shows how &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; is a &lt;tt class="docutils literal"&gt;type&lt;/tt&gt;. If you want to understand that, you
may want to read some things about &lt;a class="reference external" href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"&gt;metaclasses&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="an-improved-dir-function"&gt;
&lt;h2&gt;An improved dir function&lt;/h2&gt;
&lt;p&gt;To simplify things, let us just create a different &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function, where
&lt;tt class="docutils literal"&gt;old_dir&lt;/tt&gt; would be how the &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function currently behaves:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;NotDefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;old_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NotDefined&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;NotDefined&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="why-does-this-happen"&gt;
&lt;h2&gt;Why does this happen?&lt;/h2&gt;
&lt;p&gt;For C code analysis I'm going to switch to the latest revisions (Python
3.4.0a1+). Somewhere in Python &amp;gt; 3.2 &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt; methods have been added to
all the normal objects (You could've customized your functions for a long time
now). The &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function looks up the magic functions for an object and
executes it.&lt;/p&gt;
&lt;p&gt;There are two different kind of &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt; functions, one for objects - one
for types, let's look at the C code documentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* __dir__ for generic objects: returns __dict__, __class__,&lt;/span&gt;
&lt;span class="cm"&gt;   and recursively up the __class__.__bases__ chain.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;object_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* the comments above say everything */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* __dir__ for type objects: returns __dict__ and __bases__.&lt;/span&gt;
&lt;span class="cm"&gt;   We deliberately don&amp;#39;t suck up its __class__, as methods belonging to the&lt;/span&gt;
&lt;span class="cm"&gt;   metaclass would probably be more confusing than helpful.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;type_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_New&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;merge_class_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_Keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Py_XDECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* full source code, not shortened*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see there's a note in front of the &lt;tt class="docutils literal"&gt;type_dir&lt;/tt&gt; method (in
&lt;tt class="docutils literal"&gt;Objects/typeobject.c&lt;/tt&gt;), that says: &lt;em&gt;&amp;quot;We deliberately don't suck up its
__class__, as methods belonging to the metaclass would probably be more
confusing than helpful.&amp;quot;&lt;/em&gt; &lt;strong&gt;This is the explanation.&lt;/strong&gt; I think that's not
correct, because people would like to know that there's a &lt;tt class="docutils literal"&gt;__bases__&lt;/tt&gt;
variable and a very useful &lt;tt class="docutils literal"&gt;__subclasses__&lt;/tt&gt; method in classes. &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; is the
tool Python programmers typically find out about it.&lt;/p&gt;
&lt;p&gt;Solution? Just change the &lt;tt class="docutils literal"&gt;type_dir&lt;/tt&gt; function, please! I will also suggest
this in the Python issue tracker. Edit: &lt;a class="reference external" href="http://bugs.python.org/msg197471"&gt;I just did&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Why did I research this? Because I want &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi&lt;/a&gt; to be correct. Really.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;Thank you for the discussion on &lt;a class="reference external" href="http://www.reddit.com/r/Python/comments/1m6zrq/pythons_dir_function_is_wrong/"&gt;reddit&lt;/a&gt;,
I want to clarify a few things:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi&lt;/a&gt; doesn't actually use the &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt; function. I
just realized that I haven't made this clear. Jedi generally doesn't execute
code. The reason why I'm mentioning this is because it has really confused me
(I'm using the interactive shell to introspect).&lt;/p&gt;
&lt;p&gt;Some argue that &lt;tt class="docutils literal"&gt;__bases__&lt;/tt&gt; is not relevant. That's true in a lot of cases.
But most of the other magic methods are also not relevant. I mean seriously,
who knows what &lt;tt class="docutils literal"&gt;str.__reduce_ex__&lt;/tt&gt; even does? Who would use it? &lt;tt class="docutils literal"&gt;__bases__&lt;/tt&gt;
is something that a lot of people have used in contrary. So IMHO there are two
options: Either show all the methods or none. I think it's perfectly ok to now
show magic methods in &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt;. You could also change the function to
&lt;tt class="docutils literal"&gt;dir(object, magic=False)&lt;/tt&gt;, that's also ok. I just think that the current
implementation is confusing.&lt;/p&gt;
&lt;p&gt;If you still don't believe me, even the awesome &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; &lt;a class="reference external" href="https://github.com/ipython/ipython/blob/f645e5c044efeacf1aa523ec43f6a25d439e287b/IPython/utils/dir2.py"&gt;rewrote dir&lt;/a&gt;
and included the &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; methods.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

