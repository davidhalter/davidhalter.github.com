<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://jedidjah.ch/code/feed.atom</id>
  <updated>2013-09-08T00:00:00Z</updated>
  <link href="http://jedidjah.ch/code/" />
  <link href="http://jedidjah.ch/code/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">rstblog - what a charm!</title>
    <id>http://jedidjah.ch/code/2013/1/18/rstblog</id>
    <updated>2013-01-18T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/1/18/rstblog" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;p&gt;I never really had the motivation to have my own website. But because I'm going
to be in Afghanistan for a while, I wanted to do a little bit of blogging, so I
decided to start a &lt;a class="reference external" href="http://xkcd.com/148/"&gt;blag&lt;/a&gt; after all.&lt;/p&gt;
&lt;p&gt;The reason why I was not going for tumblr, blogspot, etc. was that once your
content is there, it's hard to get it away from there. I always like to have
open formats. Fortunately a &lt;a class="reference external" href="http://blog.dbrgn.ch"&gt;good friend&lt;/a&gt; is using
rstblog, which uses the rst format (google it, if you don't know it yet!) to
create blog content.&lt;/p&gt;
&lt;p&gt;The only really awful thing about rstblog is that there's no documentation
around. It's just an unmaintaned project. This is pretty annoying sometimes,
but if you're just going for a blog (no special wishes like me), you'll be
fine. I'm hosting it on github now (html only).&lt;/p&gt;
&lt;p&gt;So with his permission, I cloned his &lt;a class="reference external" href="https://github.com/dbrgn/blog"&gt;blog&lt;/a&gt;,
tweaked it a little (to have something more like a website). And here it is.
He also gives a little introduction into the &lt;a class="reference external" href="http://blog.dbrgn.ch/2012/6/11/rstblog/"&gt;powers of rstblog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Further ressources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mitsuhiko/rstblog"&gt;rstblog&lt;/a&gt; by &lt;a class="reference external" href="http://lucumr.pocoo.org/"&gt;Armin Ronacher&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;source code for my blog on &lt;a class="reference external" href="https://github.com/davidhalter/davidhalter.github.com/tree/dev"&gt;github&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Why Jedi not Rope</title>
    <id>http://jedidjah.ch/code/2013/1/19/why_jedi_not_rope</id>
    <updated>2013-01-19T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/1/19/why_jedi_not_rope" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;p&gt;Recently &lt;a class="reference external" href="http://www.reddit.com/r/Python/comments/15604u/pycharm_sale_75_off/c7qw8kv?context=3"&gt;I was asked&lt;/a&gt;
to compare Jedi with Rope, because saying &amp;quot;it's better&amp;quot; was just not good
enough. :-)&lt;/p&gt;
&lt;p&gt;Now, in the python world there are 3 fairly good auto-completion systems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://rope.sourceforge.net/"&gt;Rope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCharm (commercial IDE, not a library)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://jedi.jedidjah.ch/"&gt;Jedi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only other autocompletion library is &lt;cite&gt;PySmell&lt;/cite&gt;, which is just very simple.
Doesn't understand code that is a little bit more complicated. Other solutions
include &lt;cite&gt;PyDev&lt;/cite&gt;, &lt;cite&gt;PyDiction&lt;/cite&gt;, and &lt;cite&gt;pythoncomplete&lt;/cite&gt;, which are all fine but
don't offer a good autocompletion system.&lt;/p&gt;
&lt;p&gt;I will compare Rope and Jedi now. I'm not comparing with PyCharm now, it's not
as good as Jedi, but I'll talk about that another day.&lt;/p&gt;
&lt;p&gt;So the main difference between Rope and Jedi is their goal. You can see that in
the description:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rope, a python refactoring library.&lt;/li&gt;
&lt;li&gt;Jedi, an awesome autocompletion library for Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rope was never really intended to be an autocompletion library and therefore
has a natural disadvantage in this field.&lt;/p&gt;
&lt;div class="section" id="completion-comparison"&gt;
&lt;h2&gt;Completion comparison&lt;/h2&gt;
&lt;p&gt;So I went down to the real business: Checking for cases that might work in one
library, but not in the other. So I sat down and used Spyder to compare a few
things (Spyder is using Rope, but &lt;a class="reference external" href="https://github.com/davidhalter/jedi/issues/102"&gt;is considering&lt;/a&gt; to switch to Jedi).  As
expected I haven't found anything that is working in Rope, but not in Jedi.
With Rope the following things don't complete (work in Jedi though):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;generators/iterators&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;__call__&lt;/cite&gt; and other magic methods&lt;/li&gt;
&lt;li&gt;completion within classes/functions&lt;/li&gt;
&lt;li&gt;dynamic arrays&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;*args&lt;/cite&gt;, &lt;cite&gt;**kwargs&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;lambdas&lt;/li&gt;
&lt;li&gt;simple sys.path manipulations&lt;/li&gt;
&lt;li&gt;invalid code, Rope cannot handle too many errors, in Jedi it will always work
if some parts of the code are valid.&lt;/li&gt;
&lt;li&gt;performance in big files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rope isn't &amp;quot;bad&amp;quot;. It's just not as good as Jedi for autocompletion. But it's
pretty clear that Rope fails to understand some basic principles of Python. For
example &lt;cite&gt;list.append&lt;/cite&gt; in one place will already make Rope useless.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api-goodness"&gt;
&lt;h2&gt;API goodness&lt;/h2&gt;
&lt;p&gt;Jedi has a very nice and user-friendly API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jedi&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;import json; json.l&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;oad&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;load&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, what about Rope? The documentation says something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rope.base.project&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;
&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.ropeproject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rope.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;codeassist&lt;/span&gt;
&lt;span class="c"&gt;# Get the proposals; you might want to pass a Resource&lt;/span&gt;
&lt;span class="n"&gt;proposals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codeassist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_assist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;proposals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codeassist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sorted_proposals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proposals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I don't know it it's possible to do the same with Rope and Jedi, it's
certainly clear that there's &lt;a class="reference external" href="http://rope.sourceforge.net/library.html#rope-contrib-codeassist"&gt;no documentation&lt;/a&gt; around for
Rope. It's also not clear how Rope would check for relative imports, because
Rope simply doesn't know where the file it is completing is situated at (the
project folder might be in an other directory).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="refactoring"&gt;
&lt;h2&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;This is really the place where Rope shines. I don't want to talk about this too
long, but Jedi has only very limited refactoring possibilities like renaming.
There's a &lt;a class="reference external" href="https://github.com/davidhalter/jedi/issues/103"&gt;discussion&lt;/a&gt; going
on on github, how to improve the refactoring in Jedi. But Rope will probably
always be better there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Like Jedi is not really suited for refactoring, Rope is not really suited for
autocompletion. In a fully fledged IDE I would recommend to use Jedi for
autocompletion and Rope for refactorings. I think these two complement one
another very well.&lt;/p&gt;
&lt;p&gt;But if you are asking yourself: &lt;strong&gt;Which one should I choose&lt;/strong&gt; for my editor
(vim, emacs, sublime, etc)? The answer should always be &lt;strong&gt;Jedi&lt;/strong&gt;. You can
always add refactoring later on. But what you want in the beginning is a good
and rock-solid autocompletion library.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Why Python's dir function is wrong</title>
    <id>http://jedidjah.ch/code/2013/9/8/wrong_dir_function</id>
    <updated>2013-09-08T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/9/8/wrong_dir_function" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;p&gt;In this post I want to describe why Pythons &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function is not working
correctly. It's something that I've stumbled upon by developing &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi&lt;/a&gt;. This
also describes how the &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;object&lt;/tt&gt; internals work.&lt;/p&gt;
&lt;p&gt;Have you ever noted how the &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function is not returning all the
attributes of an object? (Note: all examples are Python 3.2, but I've tested it
with the latest revisions as well)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# note: no __bases__&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__add__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__contains__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bases__&lt;/span&gt;  &lt;span class="c"&gt;# note: no AttributeError&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;object&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; obviously doesn't return all the methods it should. Why? &lt;tt class="docutils literal"&gt;str&lt;/tt&gt; is a
&lt;tt class="docutils literal"&gt;type&lt;/tt&gt; and an &lt;tt class="docutils literal"&gt;object&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well is everything a &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; then?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This also shows how &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; is a &lt;tt class="docutils literal"&gt;type&lt;/tt&gt;. If you want to understand that, you
may want to read some things about &lt;a class="reference external" href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"&gt;metaclasses&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="an-improved-dir-function"&gt;
&lt;h2&gt;An improved dir function&lt;/h2&gt;
&lt;p&gt;To simplify things, let us just create a different &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function, where
&lt;tt class="docutils literal"&gt;old_dir&lt;/tt&gt; would be how the &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function currently behaves:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;NotDefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;old_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NotDefined&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;NotDefined&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="why-does-this-happen"&gt;
&lt;h2&gt;Why does this happen?&lt;/h2&gt;
&lt;p&gt;For C code analysis I'm going to switch to the latest revisions (Python
3.4.0a1+). Somewhere in Python &amp;gt; 3.2 &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt; methods have been added to
all the normal objects (You could've customized your functions for a long time
now). The &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function looks up the magic functions for an object and
executes it.&lt;/p&gt;
&lt;p&gt;There are two different kind of &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt; functions, one for objects - one
for types, let's look at the C code documentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* __dir__ for generic objects: returns __dict__, __class__,&lt;/span&gt;
&lt;span class="cm"&gt;   and recursively up the __class__.__bases__ chain.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;object_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* the comments above say everything */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* __dir__ for type objects: returns __dict__ and __bases__.&lt;/span&gt;
&lt;span class="cm"&gt;   We deliberately don&amp;#39;t suck up its __class__, as methods belonging to the&lt;/span&gt;
&lt;span class="cm"&gt;   metaclass would probably be more confusing than helpful.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;type_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_New&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;merge_class_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_Keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Py_XDECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* full source code, not shortened*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see there's a note in front of the &lt;tt class="docutils literal"&gt;type_dir&lt;/tt&gt; method, that says:
&lt;em&gt;&amp;quot;We deliberately don't suck up its __class__, as methods belonging to the
metaclass would probably be more confusing than helpful.&amp;quot;&lt;/em&gt; &lt;strong&gt;This is the
explanation.&lt;/strong&gt; I think that's not correct, because people would like to know that
there's a &lt;tt class="docutils literal"&gt;__bases__&lt;/tt&gt; variable and a very useful &lt;tt class="docutils literal"&gt;__subclasses__&lt;/tt&gt; method in
classes. &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; is the tool Python programmers typically find out about it.&lt;/p&gt;
&lt;p&gt;Solution? Just change the &lt;tt class="docutils literal"&gt;type_dir&lt;/tt&gt; function, please! I will also suggest
this in the Python issue tracker.&lt;/p&gt;
&lt;p&gt;Why did I research this? Because I want &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi&lt;/a&gt; to be correct. Really.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

