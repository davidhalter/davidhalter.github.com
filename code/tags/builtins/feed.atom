<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://jedidjah.ch/code/feed.atom</id>
  <updated>2013-09-08T00:00:00Z</updated>
  <link href="http://jedidjah.ch/code/" />
  <link href="http://jedidjah.ch/code/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://jedidjah.ch/code/feed.atom">
    <title type="text">Why Pythons dir function is wrong</title>
    <id>http://jedidjah.ch/code/2013/9/8/wrong_dir_function</id>
    <updated>2013-09-08T00:00:00Z</updated>
    <link href="http://jedidjah.ch/code/2013/9/8/wrong_dir_function" />
    <author>
      <name>David Halter</name>
    </author>
    <content type="html">&lt;p&gt;In this post I want to describe why Pythons &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function is not working
correctly. It's something that I've stumbled upon by developing &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi&lt;/a&gt;. This
also describes how the &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;object&lt;/tt&gt; internals work.&lt;/p&gt;
&lt;p&gt;Have you ever noted how the &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function is not returning all the
attributes of an object? (Note: all examples are Python 3.2, but I've tested it
with the latest revisions as well)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# note: no __bases__&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__add__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__contains__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bases__&lt;/span&gt;  &lt;span class="c"&gt;# note: no AttributeError&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;object&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; obviously doesn't return all the methods it should. Why? &lt;tt class="docutils literal"&gt;str&lt;/tt&gt; is a
&lt;tt class="docutils literal"&gt;type&lt;/tt&gt; and an &lt;tt class="docutils literal"&gt;object&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well is everything a &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; then?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This also shows how &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; is a &lt;tt class="docutils literal"&gt;type&lt;/tt&gt;. If you want to understand that, you
may want to read some things about &lt;a class="reference external" href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"&gt;metaclasses&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="an-improved-dir-function"&gt;
&lt;h2&gt;An improved dir function&lt;/h2&gt;
&lt;p&gt;To simplify things, let us just create a different &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function, where
&lt;tt class="docutils literal"&gt;old_dir&lt;/tt&gt; would be how the &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function currently behaves:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;NotDefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;old_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NotDefined&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;NotDefined&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="why-does-this-happen"&gt;
&lt;h2&gt;Why does this happen?&lt;/h2&gt;
&lt;p&gt;For C code analysis I'm going to switch to the latest revisions (Python
3.4.0a1+). Somewhere in Python &amp;gt; 3.2 &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt; methods have been added to
all the normal objects (You could've customized your functions for a long time
now). The &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; function looks up the magic functions for an object and
executes it.&lt;/p&gt;
&lt;p&gt;There are two different kind of &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt; functions, one for objects - one
for types, let's look at the C code documentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* __dir__ for generic objects: returns __dict__, __class__,&lt;/span&gt;
&lt;span class="cm"&gt;   and recursively up the __class__.__bases__ chain.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;object_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* the comments above say everything */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* __dir__ for type objects: returns __dict__ and __bases__.&lt;/span&gt;
&lt;span class="cm"&gt;   We deliberately don&amp;#39;t suck up its __class__, as methods belonging to the&lt;/span&gt;
&lt;span class="cm"&gt;   metaclass would probably be more confusing than helpful.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;type_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_New&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;merge_class_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_Keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Py_XDECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* full source code, not shortened*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see there's a note in front of the &lt;tt class="docutils literal"&gt;type_dir&lt;/tt&gt; method (in
&lt;tt class="docutils literal"&gt;Objects/typeobject.c&lt;/tt&gt;), that says: &lt;em&gt;&amp;quot;We deliberately don't suck up its
__class__, as methods belonging to the metaclass would probably be more
confusing than helpful.&amp;quot;&lt;/em&gt; &lt;strong&gt;This is the explanation.&lt;/strong&gt; I think that's not
correct, because people would like to know that there's a &lt;tt class="docutils literal"&gt;__bases__&lt;/tt&gt;
variable and a very useful &lt;tt class="docutils literal"&gt;__subclasses__&lt;/tt&gt; method in classes. &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; is the
tool Python programmers typically find out about it.&lt;/p&gt;
&lt;p&gt;Solution? Just change the &lt;tt class="docutils literal"&gt;type_dir&lt;/tt&gt; function, please! I will also suggest
this in the Python issue tracker. Edit: &lt;a class="reference external" href="http://bugs.python.org/msg197471"&gt;I just did&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Why did I research this? Because I want &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi&lt;/a&gt; to be correct. Really.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;Thank you for the discussion on &lt;a class="reference external" href="http://www.reddit.com/r/Python/comments/1m6zrq/pythons_dir_function_is_wrong/"&gt;reddit&lt;/a&gt;,
I want to clarify a few things:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi&lt;/a&gt; doesn't actually use the &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt; function. I
just realized that I haven't made this clear. Jedi generally doesn't execute
code. The reason why I'm mentioning this is because it has really confused me
(I'm using the interactive shell to introspect).&lt;/p&gt;
&lt;p&gt;Some argue that &lt;tt class="docutils literal"&gt;__bases__&lt;/tt&gt; is not relevant. That's true in a lot of cases.
But most of the other magic methods are also not relevant. I mean seriously,
who knows what &lt;tt class="docutils literal"&gt;str.__reduce_ex__&lt;/tt&gt; even does? Who would use it? &lt;tt class="docutils literal"&gt;__bases__&lt;/tt&gt;
is something that a lot of people have used in contrary. So IMHO there are two
options: Either show all the methods or none. I think it's perfectly ok to now
show magic methods in &lt;tt class="docutils literal"&gt;dir&lt;/tt&gt;. You could also change the function to
&lt;tt class="docutils literal"&gt;dir(object, magic=False)&lt;/tt&gt;, that's also ok. I just think that the current
implementation is confusing.&lt;/p&gt;
&lt;p&gt;If you still don't believe me, even the awesome &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; &lt;a class="reference external" href="https://github.com/ipython/ipython/blob/f645e5c044efeacf1aa523ec43f6a25d439e287b/IPython/utils/dir2.py"&gt;rewrote dir&lt;/a&gt;
and included the &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; methods.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

